{"meta":{"title":"Using Theirs","subtitle":"Unity Tools and Tutorials","description":null,"author":"Using Theirs","url":"https://usingtheirs.github.io"},"pages":[{"title":"About","date":"2018-10-24T13:24:43.000Z","updated":"2018-12-25T12:54:10.072Z","comments":true,"path":"about/index.html","permalink":"https://usingtheirs.github.io/about/index.html","excerpt":"","text":"Ideas that make our lives better There are always smarter ways to achieve our goals. It’s a good idea to spend time looking for better approaches: tools, methodologies, and processes which save us a lot of time and make our development fun. I want to share relevant findings and creations with you. Also, I hope these ideas will give you an opportunity to think about better approaches and make your lives better. ContactEmail: usingtheirs (at Gmail)"},{"title":"Which GIT Branch?","date":"2018-10-31T14:08:41.000Z","updated":"2019-03-09T09:49:02.917Z","comments":true,"path":"which-git-branch/index.html","permalink":"https://usingtheirs.github.io/which-git-branch/index.html","excerpt":"","text":"Which GIT Branch in Asset Store Committed to a WRONG branch!Working on a wrong branch is one of the occasional mistakes if your project has multiple branches. I had made this mistake several times before I created Which Git Branch! It shows you where your project is: the working directory and the branch which you checked out. SettingsOn Windows, you can use a command line version of git. Or, the SourceTree has git command line tools. Type the following in the Command Prompt window to check if they exist. dir %USERPROFILE%\\AppData\\Local\\Atlassian\\SourceTree\\git_local\\bin Click the Setting toolbar button in the main window of Which Git Branch to open the Settings window. In that window, you can set the path of your git command line tool. Use the Test button to test if there is any problem with your settings. On Mac, you can use the built-in git command line tool or your custom installation. Use type command in the Terminal app to look for the path of your git installation. type git&gt; git is hashed (/usr/bin/git)"},{"title":"Remote Inspector Connection Troubleshooting","date":"2018-10-26T00:45:32.000Z","updated":"2018-11-07T11:53:54.115Z","comments":true,"path":"remote-inspector/connection-troubleshooting.html","permalink":"https://usingtheirs.github.io/remote-inspector/connection-troubleshooting.html","excerpt":"","text":"Net Error:Cannot connect to destination hostFirst, make sure your game is running with Remote Inspector enabled. Next, you need to check if you can connect to your mobile device from your PC. Type http://[IP Address]:[Port] in the address bar of your web browser on the PC. Replace the [IP Address] and [Port] with the values you typed in the Remote Hierarchy window. If everything is OK, you can see the message Welcome to Remote Inspector!. If you are trying to connect your device through WIFI, make sure that your PC and your device are in the same network. Or, you are trying to connect your Android device through USB/ADB, make sure of your ADB forwarding settings. type below in the command line. adb forward --list It will show you the current forward settings like below. 1515fa33f65c3282 tcp:8080 tcp:8080"},{"title":"Remote Inspector","date":"2018-10-26T00:45:32.000Z","updated":"2018-12-08T13:36:56.206Z","comments":true,"path":"remote-inspector/index.html","permalink":"https://usingtheirs.github.io/remote-inspector/index.html","excerpt":"","text":"Remote Inspector in Asset Store Connection Troubleshooting What is this?This asset has Remote Hierarchy window and Remote Inspector window. They show you the states of your game running on a mobile device or a PC. And they allow you to change the fields and properties - both private and public. Where to use?In a professional project, building an APK or an IPA takes many minutes to hours. So just adding a line of a log to your game to view a variable’s value can take most of your work time away. But if you build your game with this asset, you can do the following things without rebuilding your game or implementing a custom tool. Debugging - View the hierarchy and change game objects’ fields and properties without writing any code. Even private fields and properties. Performance Tuning - Turn on/off game objects and components to find what drops your game’s FPS down. Balancing - Tweak level data during playtests to make your game fun. How to use?Just drop a prefab ‘RemoteInspectorServer’ in your first scene. The prefab has a small web server in it. And it communicates with the Unity Editor parts through the network. If your PC and your mobile device are in the same network, just type the IP address of your mobile device and the port, and click the Refresh button in the Hierarchy Window. The default port is 8080. And you can change the default port in the RemoteInspectorServer prefab. Or, if your Android device is connected to your PC through a USB cable, you can make use of ADB’s port forwarding feature. The following command adds a port forwarding setting. If it is succeeded, type ‘localhost:8080’ and click the Refresh button in the Hierarchy Window. See Unity document’s ADB profiling section for details. adb forward tcp:8080 tcp:8080 IL2CPPIf you are using IL2CPP, you can not see some components in the Remote Inspector window. It is because IL2CPP strips unused classes by static checking. To prevent it, you need to set up a link.xml file in your Unity project. See Bytecode Stripping page for details. Remote Inspector has an example link.xml file that preserves all UnityEngine core classes in the Example directory, Example.link.xml. You need to rename it to link.xml. LimitationsRemote Inspector shows components in a raw form. It’s different with Unity’s built-in inspector which makes use of custom editors. This may confuse you with unknown field and property names. But in some cases, this may help you with the ability to view and change raw values not exposed to Unity’s built-in inspector. Settings Type or variable names not to serialize Add class types or variable names to SerializationConfig.IsSerializable()"},{"title":"Unity Assets","date":"2018-10-31T13:57:12.000Z","updated":"2018-11-20T13:07:52.925Z","comments":true,"path":"unity-assets/index.html","permalink":"https://usingtheirs.github.io/unity-assets/index.html","excerpt":"","text":"Remote Inspector This asset has Remote Hierarchy window and Remote Inspector window. They show you the states of your game running on a mobile device or a PC. And they allow you to change the fields and properties - both private and public. Learn more… Which SVN Branch This asset displays the working directory and the SVN branch on which you are working. Learn more… Which GIT Branch This asset displays the working directory and the GIT branch on which you are working. Learn more…"},{"title":"Which SVN Branch?","date":"2018-10-31T14:08:35.000Z","updated":"2018-11-21T14:19:18.676Z","comments":true,"path":"which-svn-branch/index.html","permalink":"https://usingtheirs.github.io/which-svn-branch/index.html","excerpt":"","text":"Which SVN Branch in Asset Store Committed to a WRONG branch!Working on a wrong branch is one of the occasional mistakes if your project has multiple branches. I had made this mistake several times before I created Which Svn Branch! It shows you where your project is: the working directory and the branch which you checked out. SettingsOn Windows, you can use a command line version of subversion. Or, the TortoiseSVN installer has an option to install a command line svn with TortoiseSVN. Click the Setting toolbar button in the main window of Which Svn Branch to open the Settings window. In that window, you can set the path of your svn command line tool. Use the Test button to test if there is any problem with your settings. On Mac, you can use the built-in svn command line tool or your custom installation. Use type command in the Terminal app to look for the path of your svn installation. type svn&gt; svn is hashed (/usr/local/bin/svn)"}],"posts":[{"title":"Displaying SVN/GIT Branch on Visual Studio and Unity","slug":"branch-info-on-vstuio-window-title","date":"2018-11-12T00:57:39.000Z","updated":"2018-11-20T13:35:45.523Z","comments":true,"path":"2018/11/12/branch-info-on-vstuio-window-title/","link":"","permalink":"https://usingtheirs.github.io/2018/11/12/branch-info-on-vstuio-window-title/","excerpt":"","text":"Making sure of the Working BranchHave you ever made code changes on the wrong branch? Or, do you have a habit to make sure of on which branch you are working? I used to do both. I have created code changes on a wrong branch several times. Moreover, I have committed them to the wrong branch. After several times of mistake, I got into a habit of making sure of on which branch I am working every time. It was a good habit. But, it was painful to open a containing directory from Visual Studio or Unity Editor and make sure the directory is the working directory of the branch I want. Displaying the Branch InformationI thought that It would be useful to show the branch information on the Visual Studio IDE or the Unity Editor UI. First, I looked for an asset in the Asset Store. But I couldn’t find one. And that is a reason why I created Which SVN Branch? and Which GIT Branch? asset. Next, I looked for an extension in the Visual Studio Marketplace. And this time, I luckily found this extension. Customize Visual Studio Window Title. Below is the title bar of my Visual Studio IDE. It shows the branch name. There are lots of tags in this extension. Please see the developer’s page for the entire tags. Below is my settings. After installing this Visual Studio extension and my Unity assets, I have not made such a mistake to work on a wrong branch. Also, it is no longer painful to make sure of on which branch I am working! If you like me, why don’t you try these? You are welcome to check out my assets: Which SVN Branch? and Which GIT Branch?.","categories":[{"name":"Dev Log","slug":"Dev-Log","permalink":"https://usingtheirs.github.io/categories/Dev-Log/"}],"tags":[{"name":"Which Svn Branch","slug":"Which-Svn-Branch","permalink":"https://usingtheirs.github.io/tags/Which-Svn-Branch/"},{"name":"Which Git Branch","slug":"Which-Git-Branch","permalink":"https://usingtheirs.github.io/tags/Which-Git-Branch/"}]},{"title":"Preserving Unity Engine Classes against IL2CPP Byte Code Stripping","slug":"Preserving-Unity-Engine-Classes-against-IL2CPP-Byte-Code-Stripping","date":"2018-10-29T12:32:22.000Z","updated":"2018-10-29T14:21:43.260Z","comments":true,"path":"2018/10/29/Preserving-Unity-Engine-Classes-against-IL2CPP-Byte-Code-Stripping/","link":"","permalink":"https://usingtheirs.github.io/2018/10/29/Preserving-Unity-Engine-Classes-against-IL2CPP-Byte-Code-Stripping/","excerpt":"","text":"Unity invented IL2CPP which translates C# binaries (IL Assembly) into C++ code. To build an iOS player, you must enable IL2CPP. On the other hand, an Android player can optionally use IL2CPP. As IL2CPP makes games a little bit faster and hard to reverse-engineer, it is recommended to enable IL2CPP for an Android player. There is one important caveat with IL2CPP. IL2CPP strips unused bytecode. It uses static code analysis to determine if the code is unused. So classes or methods which are not explicitly accessed by your code will be stripped by IL2CPP. To prevent this, you can use link.xml file or PreserveAttribute. See this Unity’s official document for details. Remote Inspector makes use of reflection and it doesn’t know what component is inspected by a user on the runtime. So when you build your game with Remote Inspector, you should preserve core Unity engine classes. Add this link.xml file to your Unity project. link.xml123456789&lt;linker&gt; &lt;assembly fullname=\"UnityEngine.CoreModule\" preserve=\"all\"/&gt; &lt;assembly fullname=\"Assembly-CSharp\"&gt; &lt;type fullname=\"UsingTheirs.RemoteInspector.ServerHttpJsonPost\" preserve=\"all\"/&gt; &lt;type fullname=\"UsingTheirs.RemoteInspector.ServerRemoteInspector\" preserve=\"all\"/&gt; &lt;/assembly&gt; &lt;assembly fullname=\"System\" preserve=\"all\"/&gt; &lt;assembly fullname=\"mscorlib\" preserve=\"all\"/&gt;&lt;/linker&gt; Note that the UnityEngine.CoreModule assembly is used instead of UnityEngine. In fact, most of the core Unity engine classes are in the UnityEngine.CoreModule assembly. An assembly is a different concept than a namespace. Be sure that you don’t include this link.xml in a release build!","categories":[{"name":"Dev Log","slug":"Dev-Log","permalink":"https://usingtheirs.github.io/categories/Dev-Log/"}],"tags":[{"name":"Remote Inspector","slug":"Remote-Inspector","permalink":"https://usingtheirs.github.io/tags/Remote-Inspector/"}]},{"title":"Considerations in Remote Inspector","slug":"Considerations-in-Remote-Inspector","date":"2018-10-28T13:35:39.000Z","updated":"2018-10-29T14:21:43.259Z","comments":true,"path":"2018/10/28/Considerations-in-Remote-Inspector/","link":"","permalink":"https://usingtheirs.github.io/2018/10/28/Considerations-in-Remote-Inspector/","excerpt":"","text":"Programming is a series of choices. There were so many trade-offs in developing Remote Inspector. Below are major decisions I have encountered during the development. (If you don’t know what Remote Inspector is, I recommend you to check this page out.) Whether to support Custom Editor UIUnity allows you to customize Inspector UIs, and Unity itself provides a variety of custom inspectors for built-in components such as MeshRenderer and Camera. When I started this project, I wanted to support these custom UIs. But after some research, I realized how it was difficult. And I also wanted to provide features like editing private fields and properties. So built-in custom UIs didn’t fit well with Remote Inspector. Where to put the serverTo establish a connection between the Unity Editor and the device, one of them should be a server. The advantage of running the server on the Unity editor (PC) side is that the client (a game running on a device) can connect to the server only when using Remote Inspector. And it is possible to hard-code the address of the PC into the APK. On the other hand, the advantage of running the server on the game (device) side is that connecting from a PC is more convenient. It’s easier to enter the address of the device on the Unity editor. And you can plenty of tools to diagnose connection problems.Therefore, I decided to put the server on the device side. What protocol to useAt first, I looked into the Protocol Buffer. I was attracted to its optional feature. As I thought it would useful for the treatment for version compatibility issues. But things were not going well. There was no official Protocol Buffer version for Unity. And It seemed like that it’s bothersome to generate protocol dlls from proto files. Eventually, I decided to use HTTP/JSON. It was simple to implement and there were lots of tools to debug it. Actually, you can use a web browser to communicate with a Remote Inspector server running on a device. Best way to make a choiceProgramming is really a series of choices. In my opinion, the best way to make a choice is to decide and experiment it quickly.","categories":[{"name":"Dev Log","slug":"Dev-Log","permalink":"https://usingtheirs.github.io/categories/Dev-Log/"}],"tags":[{"name":"Remote Inspector","slug":"Remote-Inspector","permalink":"https://usingtheirs.github.io/tags/Remote-Inspector/"}]},{"title":"Why I decided to create Remote Inspector","slug":"Why-I-decided-to-create-Remote-Inspector","date":"2018-10-26T01:01:00.000Z","updated":"2018-10-29T14:21:43.258Z","comments":true,"path":"2018/10/26/Why-I-decided-to-create-Remote-Inspector/","link":"","permalink":"https://usingtheirs.github.io/2018/10/26/Why-I-decided-to-create-Remote-Inspector/","excerpt":"","text":"Difficuly of Debugging on DevicesIf you’ve ever developed mobile games, you will know that some bugs occur only on mobile devices. Especially when you debug rendering problems or optimize rendering you have to run your game on mobile devices. But as you know, debugging on the mobile is really hard and time-consuming. You have to rebuild an APK or an IPA continuously to modify your code. Building an APK takes many minutes to hours based on your project’s size. You may spend most of your working time at building binaries. So, I decided to create a tool which enables me to view the hierarchy and modify components’ variables. I expected this tool would save lots of my time. And the result? Is Remote Inspector Helpful?It was awesome. I was able to identify problems quickly. For example, I got a black screen on some devices. I built an APK with Remote Inspector enabled. Next, I turned game object or components on and off on the runtime. and I modified some suspicious settings or values on the runtime, too. After some inspection, I found the problem was Camera’s HDR setting. I used HDR buffer for bloom effect. But some old devices didn’t support HDR buffer. Finally, I turned off the bloom effect on those devices. If I had to debug this problem without Remote Inspector? Maybe, I would spend a few days to repeat the process of adding some code and rebuilding an apk. If you are like me, why don’t you check what Remote Inspector is?","categories":[{"name":"Dev Log","slug":"Dev-Log","permalink":"https://usingtheirs.github.io/categories/Dev-Log/"}],"tags":[{"name":"Remote Inspector","slug":"Remote-Inspector","permalink":"https://usingtheirs.github.io/tags/Remote-Inspector/"}]}]}