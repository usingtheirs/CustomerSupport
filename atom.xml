<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Using Theirs</title>
  
  <subtitle>Resolve Conflicts Using Theirs</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://usingtheirs.github.io/"/>
  <updated>2018-10-29T14:21:43.260Z</updated>
  <id>https://usingtheirs.github.io/</id>
  
  <author>
    <name>Using Theirs</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Preserving Unity Engine Classes against IL2CPP Byte Code Stripping</title>
    <link href="https://usingtheirs.github.io/2018/10/29/Preserving-Unity-Engine-Classes-against-IL2CPP-Byte-Code-Stripping/"/>
    <id>https://usingtheirs.github.io/2018/10/29/Preserving-Unity-Engine-Classes-against-IL2CPP-Byte-Code-Stripping/</id>
    <published>2018-10-29T12:32:22.000Z</published>
    <updated>2018-10-29T14:21:43.260Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/10/29/Preserving-Unity-Engine-Classes-against-IL2CPP-Byte-Code-Stripping/Lock.jpg"><p>Unity invented IL2CPP which translates C# binaries (IL Assembly) into C++ code. To build an iOS player, you must enable IL2CPP.  On the other hand, an Android player can optionally use IL2CPP.  As IL2CPP makes games a little bit faster and hard to reverse-engineer, it is recommended to enable IL2CPP for an Android player.</p><p>There is one important caveat with IL2CPP. IL2CPP strips unused bytecode. It uses static code analysis to determine if the code is unused. So classes or methods which are not explicitly accessed by your code will be stripped by IL2CPP. To prevent this, you can use <code>link.xml</code> file or <a href="https://docs.unity3d.com/ScriptReference/Scripting.PreserveAttribute.html" target="_blank" rel="noopener">PreserveAttribute</a>. See this <a href="https://docs.unity3d.com/Manual/IL2CPP-BytecodeStripping.html" target="_blank" rel="noopener">Unity’s official document</a> for details.</p><p><a href="/remote-inspector/index.html">Remote Inspector</a> makes use of reflection and it doesn’t know what component is inspected by a user on the runtime. So when you build your game with Remote Inspector, you should preserve core Unity engine classes. Add this <code>link.xml</code> file to your Unity project.</p><figure class="highlight xml"><figcaption><span>link.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">linker</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">"UnityEngine.CoreModule"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">"Assembly-CSharp"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">"UsingTheirs.RemoteInspector.ServerHttpJsonPost"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">type</span> <span class="attr">fullname</span>=<span class="string">"UsingTheirs.RemoteInspector.ServerRemoteInspector"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">"System"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">assembly</span> <span class="attr">fullname</span>=<span class="string">"mscorlib"</span> <span class="attr">preserve</span>=<span class="string">"all"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">linker</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Note that the <code>UnityEngine.CoreModule</code> assembly is used instead of <code>UnityEngine</code>. In fact, most of the core Unity engine classes are in the <code>UnityEngine.CoreModule</code> assembly. An assembly is a different concept than a namespace.</p><p>Be sure that you don’t include this link.xml in a release build!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/10/29/Preserving-Unity-Engine-Classes-against-IL2CPP-Byte-Code-Stripping/Lock.jpg&quot;&gt;
&lt;p&gt;Unity invented IL2CPP which translate
      
    
    </summary>
    
      <category term="Dev Log" scheme="https://usingtheirs.github.io/categories/Dev-Log/"/>
    
    
      <category term="Remote Inspector" scheme="https://usingtheirs.github.io/tags/Remote-Inspector/"/>
    
  </entry>
  
  <entry>
    <title>Considerations in Remote Inspector</title>
    <link href="https://usingtheirs.github.io/2018/10/28/Considerations-in-Remote-Inspector/"/>
    <id>https://usingtheirs.github.io/2018/10/28/Considerations-in-Remote-Inspector/</id>
    <published>2018-10-28T13:35:39.000Z</published>
    <updated>2018-10-29T14:21:43.259Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/10/28/Considerations-in-Remote-Inspector/Choice.jpg"><p>Programming is a series of choices. There were so many trade-offs in developing Remote Inspector. Below are major decisions I have encountered during the development.</p><p>(If you don’t know what Remote Inspector is, I recommend you to check this <a href="/remote-inspector/index.html">page</a> out.)</p><h3 id="Whether-to-support-Custom-Editor-UI"><a href="#Whether-to-support-Custom-Editor-UI" class="headerlink" title="Whether to support Custom Editor UI"></a>Whether to support Custom Editor UI</h3><p>Unity allows you to customize Inspector UIs, and Unity itself provides a variety of custom inspectors for built-in components such as MeshRenderer and Camera. When I started this project, I wanted to support these custom UIs. But after some research, I realized how it was difficult. And I also wanted to provide features like editing private fields and properties. So built-in custom UIs didn’t fit well with Remote Inspector. </p><h3 id="Where-to-put-the-server"><a href="#Where-to-put-the-server" class="headerlink" title="Where to put the server"></a>Where to put the server</h3><p>To establish a connection between the Unity Editor and the device, one of them should be a server. The advantage of running the server on the Unity editor (PC) side is that the client (a game running on a device) can connect to the server only when using Remote Inspector. And it is possible to hard-code the address of the PC into the APK.</p><p>On the other hand, the advantage of running the server on the game (device) side is that connecting from a PC is more convenient. It’s easier to enter the address of the device on the Unity editor. And you can plenty of tools to diagnose connection problems.<br>Therefore, I decided to put the server on the device side.</p><h3 id="What-protocol-to-use"><a href="#What-protocol-to-use" class="headerlink" title="What protocol to use"></a>What protocol to use</h3><p>At first, I looked into the Protocol Buffer. I was attracted to its optional feature. As I thought it would useful for the treatment for version compatibility issues. But things were not going well. There was no official Protocol Buffer version for Unity. And It seemed like that it’s bothersome to generate protocol dlls from proto files.</p><p>Eventually, I decided to use HTTP/JSON. It was simple to implement and there were lots of tools to debug it. Actually, you can use a web browser to communicate with a Remote Inspector server running on a device.</p><h3 id="Best-way-to-make-a-choice"><a href="#Best-way-to-make-a-choice" class="headerlink" title="Best way to make a choice"></a>Best way to make a choice</h3><p>Programming is really a series of choices. In my opinion, the best way to make a choice is to decide and experiment it quickly.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/10/28/Considerations-in-Remote-Inspector/Choice.jpg&quot;&gt;
&lt;p&gt;Programming is a series of choices. There were so many trade-offs i
      
    
    </summary>
    
      <category term="Dev Log" scheme="https://usingtheirs.github.io/categories/Dev-Log/"/>
    
    
      <category term="Remote Inspector" scheme="https://usingtheirs.github.io/tags/Remote-Inspector/"/>
    
  </entry>
  
  <entry>
    <title>Why I decided to create Remote Inspector</title>
    <link href="https://usingtheirs.github.io/2018/10/26/Why-I-decided-to-create-Remote-Inspector/"/>
    <id>https://usingtheirs.github.io/2018/10/26/Why-I-decided-to-create-Remote-Inspector/</id>
    <published>2018-10-26T01:01:00.000Z</published>
    <updated>2018-10-29T14:21:43.258Z</updated>
    
    <content type="html"><![CDATA[<img src="/2018/10/26/Why-I-decided-to-create-Remote-Inspector/BloggerAndPhone.jpg"><h3 id="Difficuly-of-Debugging-on-Devices"><a href="#Difficuly-of-Debugging-on-Devices" class="headerlink" title="Difficuly of Debugging on Devices"></a>Difficuly of Debugging on Devices</h3><p>If you’ve ever developed mobile games, you will know that some bugs occur only on mobile devices. Especially when you debug rendering problems or optimize rendering you have to run your game on mobile devices. But as you know, debugging on the mobile is really hard and time-consuming. You have to rebuild an APK or an IPA continuously to modify your code. Building an APK takes many minutes to hours based on your project’s size. You may spend most of your working time at building binaries.</p><p>So, I decided to create a tool which enables me to view the hierarchy and modify components’ variables. I expected this tool would save lots of my time. And the result?</p><h3 id="Is-Remote-Inspector-Helpful"><a href="#Is-Remote-Inspector-Helpful" class="headerlink" title="Is Remote Inspector Helpful?"></a>Is Remote Inspector Helpful?</h3><p>It was awesome. I was able to identify problems quickly. </p><p>For example, I got a black screen on some devices. I built an APK with Remote Inspector enabled. Next, I turned game object or components on and off on the runtime. and I modified some suspicious settings or values on the runtime, too. After some inspection, I found the problem was  Camera’s HDR setting. I used HDR buffer for bloom effect. But some old devices didn’t support HDR buffer. Finally, I turned off the bloom effect on those devices.</p><p>If I had to debug this problem without Remote Inspector? Maybe, I would spend a few days to repeat the process of adding some code and rebuilding an apk. If you are like me, why don’t you check what <a href="/remote-inspector/index.html">Remote Inspector</a> is?</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;img src=&quot;/2018/10/26/Why-I-decided-to-create-Remote-Inspector/BloggerAndPhone.jpg&quot;&gt;
&lt;h3 id=&quot;Difficuly-of-Debugging-on-Devices&quot;&gt;&lt;a href=&quot;#Di
      
    
    </summary>
    
      <category term="Dev Log" scheme="https://usingtheirs.github.io/categories/Dev-Log/"/>
    
    
      <category term="Remote Inspector" scheme="https://usingtheirs.github.io/tags/Remote-Inspector/"/>
    
  </entry>
  
</feed>
